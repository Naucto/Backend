generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MonetizationType {
  NONE
  ADS
  PAID
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime @default(now())

  roles     Role[]   @relation("UserRoles")

  // Relations
  friendsInitiated Friendship[]    @relation("UserAFriends")
  friendsReceived  Friendship[]    @relation("UserBFriends")
  sentRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedRequests FriendRequest[] @relation("ReceivedFriendRequests")
  subscriptions    Subscription[]
  comments         Comment[]
  gameSessions     GameSession[]
  collaborators    Project[]       @relation("ProjectCollaborators")

  workSession      WorkSession[]     @relation("WorkSessionUsers")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[] @relation("UserRoles")
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  from      User     @relation("SentFriendRequests", fields: [fromId], references: [id])
  fromId    Int
  to        User     @relation("ReceivedFriendRequests", fields: [toId], references: [id])
  toId      Int
  createdAt DateTime @default(now())

  @@unique([fromId, toId])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  userA     User     @relation("UserAFriends", fields: [userAId], references: [id])
  userAId   Int
  userB     User     @relation("UserBFriends", fields: [userBId], references: [id])
  userBId   Int
  createdAt DateTime @default(now())

  @@unique([userAId, userBId])
}

model Subscription {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  price     Int
  startDate DateTime
  endDate   DateTime?
}

model Project {
  id           Int              @id @default(autoincrement())
  name         String
  shortDesc    String
  longDesc     String
  status       ProjectStatus    @default(IN_PROGRESS)
  iconUrl      String?
  fileName     String
  monetization MonetizationType @default(NONE)
  price        Float?
  createdAt    DateTime         @default(now())

  // Relations
  collaborators User[]        @relation("ProjectCollaborators")
  comments      Comment[]
  gameSessions  GameSession[]
  workSession   WorkSession?

  // Statistiques agrégées
  uniquePlayers Int @default(0)
  activePlayers Int @default(0)
  likes         Int @default(0)
}

model Comment {
  id        Int       @id @default(autoincrement())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  project   Project   @relation(fields: [projectId], references: [id])
  projectId Int
  parentId  Int?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  content   String
  rating    Int
  createdAt DateTime  @default(now())

  @@index([projectId])
  @@index([authorId])
}

model GameSession {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  project   Project   @relation(fields: [projectId], references: [id])
  projectId Int
  startedAt DateTime  @default(now())
  endedAt   DateTime?
}

model WorkSession {
  id        Int       @id @default(autoincrement())
  users     User[]    @relation("WorkSessionUsers")
  project   Project   @relation(fields: [projectId], references: [id])
  projectId Int       @unique
  startedAt DateTime  @default(now())

  roomId       String @unique @default(uuid())
  roomPassword String @default(uuid())
}
